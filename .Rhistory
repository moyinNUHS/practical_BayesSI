legend.key = element_rect(fill = "white"),
plot.margin = unit(c(-1,-20,-3,-30), "cm")) +
guides(fill = "none",
color = guide_legend(override.aes = list(size=5))) +
coord_fixed (ratio = 1.2)
dev.off()
# libraries
require(leaflet)
require(dplyr)
library(flexdashboard)
library(gapminder)
library(mapdata)
library(viridis)
library(stringr)
library(ggplot2)
################
# PREPARE DATA #
################
#import GPS data
location.df.acorn2 = read.csv('~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/resources/ACORN2_site_GPS_data_Dec-2022.csv')
location.df.acorn2$study.type = 'ACORN II'
location.df.acorn2$country = sub("\\ - .*", "", location.df.acorn2$Site.name)
location.df.acorn2 = location.df.acorn2[,-which(colnames(location.df.acorn2) == 'Site')]
location.df.acornhai = read.csv('~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/resources/ACORNHAI_site_GPS_data_Dec-2022.csv')
location.df.acornhai$study.type = 'ACORN-HAI'
colnames(location.df.acornhai)[4] = 'country'
location.df = rbind(location.df.acorn2, location.df.acornhai)
location.df$Site.name = trimws(location.df$Site.name)
#overlapping sites
location.df = location.df[-which(location.df$Site.name %in%
c('Vietnam - National Hospital for Tropical Diseases',
'Nepal - B.P. Koirala Institute of Health Sciences',
'Nepal - Patan Hospital')),]
location.df$study.type[location.df$Site.name %in% c('NHTD - Hanoi',
'B.P. Koirala Institute of Health Sciences',
'Patan Hospital')] = 'Both ACORN II and ACORN-HAI'
###################
# PREPARE MAP DATA#
###################
# country codes in gapminder::country_codes
gapminder_codes = gapminder::country_codes
# countries with info in gapminder::gapminder_unfiltered
gapminder = gapminder::gapminder_unfiltered
# join both datasets with inner_join to get a dataset with the info by country, continent and country-code
gapminder <- gapminder %>%
inner_join(gapminder_codes, by = "country") %>%
mutate(code = iso_alpha)
gapminder_data <- gapminder %>%
inner_join(maps::iso3166 %>%
select(a3, mapname), by = c(code = "a3")) %>%
mutate(mapname = str_remove(mapname, "\\(.*"))
d.country = map_data("world") %>%
tbl_df() %>%
inner_join(gapminder_data, by=c(region= "mapname")) %>%
filter(year == 2007)
d.country$participating = 0
d.country$participating[which(d.country$country %in% location.df$country)] = 1
# A base map of the world (Antarctica removed)
d.country <- d.country[which(d.country$continent %in% c('Asia', 'Africa')),]
#############
# PLOT MAP  #
#############
png("~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/submission/graphics/site_map.png",
width = 1500, height = 750, pointsize = 6)
ggplot() +
geom_polygon(data = d.country, aes(long, lat, group = group, fill = as.factor(participating)), color = "white", size = 0.05) +
scale_fill_manual(values = c("grey80","#9dc2c4")) +
geom_point(aes(x = Longitude, y = Latitude, colour = as.factor(study.type)), pch = 1, stroke = 2, alpha = 0.8, size = 5,  data = location.df) +
scale_colour_manual(values = c("#F76C5E", "#E3C16F", "#3066BE"), name = '') +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
legend.text = element_text(color = "grey40", size = 16, hjust = 0),
legend.position = c(0.85, 0.25),
legend.background = element_blank(),
legend.key.size = unit(1, "cm"),
legend.key = element_rect(fill = "white"),
plot.margin = unit(c(-1,-20,-3,-30), "cm")) +
guides(fill = "none",
color = guide_legend(override.aes = list(size=5))) +
coord_fixed (ratio = 1.2)
dev.off()
# libraries
require(leaflet)
require(dplyr)
library(flexdashboard)
library(gapminder)
library(mapdata)
library(viridis)
library(stringr)
library(ggplot2)
################
# PREPARE DATA #
################
#import GPS data
location.df.acorn2 = read.csv('~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/resources/ACORN2_site_GPS_data_Dec-2022.csv')
location.df.acorn2$study.type = 'ACORN II'
location.df.acorn2$country = sub("\\ - .*", "", location.df.acorn2$Site.name)
location.df.acorn2 = location.df.acorn2[,-which(colnames(location.df.acorn2) == 'Site')]
location.df.acornhai = read.csv('~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/resources/ACORNHAI_site_GPS_data_Dec-2022.csv')
location.df.acornhai$study.type = 'ACORN-HAI'
colnames(location.df.acornhai)[4] = 'country'
location.df = rbind(location.df.acorn2, location.df.acornhai)
location.df$Site.name = trimws(location.df$Site.name)
#overlapping sites
location.df = location.df[-which(location.df$Site.name %in%
c('Vietnam - National Hospital for Tropical Diseases',
'Nepal - B.P. Koirala Institute of Health Sciences',
'Nepal - Patan Hospital')),]
location.df$study.type[location.df$Site.name %in% c('NHTD - Hanoi',
'B.P. Koirala Institute of Health Sciences',
'Patan Hospital')] = 'Both ACORN II and ACORN-HAI'
###################
# PREPARE MAP DATA#
###################
# country codes in gapminder::country_codes
gapminder_codes = gapminder::country_codes
# countries with info in gapminder::gapminder_unfiltered
gapminder = gapminder::gapminder_unfiltered
# join both datasets with inner_join to get a dataset with the info by country, continent and country-code
gapminder <- gapminder %>%
inner_join(gapminder_codes, by = "country") %>%
mutate(code = iso_alpha)
gapminder_data <- gapminder %>%
inner_join(maps::iso3166 %>%
select(a3, mapname), by = c(code = "a3")) %>%
mutate(mapname = str_remove(mapname, "\\(.*"))
d.country = map_data("world") %>%
tbl_df() %>%
inner_join(gapminder_data, by=c(region= "mapname")) %>%
filter(year == 2007)
d.country$participating = 0
d.country$participating[which(d.country$country %in% location.df$country)] = 1
# A base map of the world (Antarctica removed)
d.country <- d.country[which(d.country$continent %in% c('Asia', 'Africa')),]
#############
# PLOT MAP  #
#############
png("~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/submission/graphics/site_map.png",
width = 1500, height = 750, pointsize = 6)
ggplot() +
geom_polygon(data = d.country, aes(long, lat, group = group, fill = as.factor(participating)), color = "white", size = 0.05) +
scale_fill_manual(values = c("grey80","#9dc2c4")) +
geom_point(aes(x = Longitude, y = Latitude, colour = as.factor(study.type)), pch = 1, stroke = 2, alpha = 0.8, size = 4,  data = location.df) +
scale_colour_manual(values = c("#F76C5E", "#E3C16F", "#3066BE"), name = '') +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
legend.text = element_text(color = "grey40", size = 16, hjust = 0),
legend.position = c(0.85, 0.25),
legend.background = element_blank(),
legend.key.size = unit(1, "cm"),
legend.key = element_rect(fill = "white"),
plot.margin = unit(c(-1,-20,-3,-30), "cm")) +
guides(fill = "none",
color = guide_legend(override.aes = list(size=5))) +
coord_fixed (ratio = 1.2)
dev.off()
# libraries
require(leaflet)
require(dplyr)
library(flexdashboard)
library(gapminder)
library(mapdata)
library(viridis)
library(stringr)
library(ggplot2)
################
# PREPARE DATA #
################
#import GPS data
location.df.acorn2 = read.csv('~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/resources/ACORN2_site_GPS_data_Dec-2022.csv')
location.df.acorn2$study.type = 'ACORN II'
location.df.acorn2$country = sub("\\ - .*", "", location.df.acorn2$Site.name)
location.df.acorn2 = location.df.acorn2[,-which(colnames(location.df.acorn2) == 'Site')]
location.df.acornhai = read.csv('~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/resources/ACORNHAI_site_GPS_data_Dec-2022.csv')
location.df.acornhai$study.type = 'ACORN-HAI'
colnames(location.df.acornhai)[4] = 'country'
location.df = rbind(location.df.acorn2, location.df.acornhai)
location.df$Site.name = trimws(location.df$Site.name)
#overlapping sites
location.df = location.df[-which(location.df$Site.name %in%
c('Vietnam - National Hospital for Tropical Diseases',
'Nepal - B.P. Koirala Institute of Health Sciences',
'Nepal - Patan Hospital')),]
location.df$study.type[location.df$Site.name %in% c('NHTD - Hanoi',
'B.P. Koirala Institute of Health Sciences',
'Patan Hospital')] = 'Both ACORN II and ACORN-HAI'
###################
# PREPARE MAP DATA#
###################
# country codes in gapminder::country_codes
gapminder_codes = gapminder::country_codes
# countries with info in gapminder::gapminder_unfiltered
gapminder = gapminder::gapminder_unfiltered
# join both datasets with inner_join to get a dataset with the info by country, continent and country-code
gapminder <- gapminder %>%
inner_join(gapminder_codes, by = "country") %>%
mutate(code = iso_alpha)
gapminder_data <- gapminder %>%
inner_join(maps::iso3166 %>%
select(a3, mapname), by = c(code = "a3")) %>%
mutate(mapname = str_remove(mapname, "\\(.*"))
d.country = map_data("world") %>%
tbl_df() %>%
inner_join(gapminder_data, by=c(region= "mapname")) %>%
filter(year == 2007)
d.country$participating = 0
d.country$participating[which(d.country$country %in% location.df$country)] = 1
# A base map of the world (Antarctica removed)
d.country <- d.country[which(d.country$continent %in% c('Asia', 'Africa')),]
#############
# PLOT MAP  #
#############
png("~/Documents/nBox/ADVANCE-ID/ACORN-HAI/protocol/manuscript/submission/graphics/site_map.png",
width = 1500, height = 750, pointsize = 6)
ggplot() +
geom_polygon(data = d.country, aes(long, lat, group = group, fill = as.factor(participating)), color = "white", size = 0.05) +
scale_fill_manual(values = c("grey80","#9dc2c4")) +
geom_point(aes(x = Longitude, y = Latitude, colour = as.factor(study.type)), pch = 18, alpha = 0.8, size = 4,  data = location.df) +
scale_colour_manual(values = c("#F76C5E", "#E3C16F", "#3066BE"), name = '') +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
legend.text = element_text(color = "grey40", size = 16, hjust = 0),
legend.position = c(0.85, 0.25),
legend.background = element_blank(),
legend.key.size = unit(1, "cm"),
legend.key = element_rect(fill = "white"),
plot.margin = unit(c(-1,-20,-3,-30), "cm")) +
guides(fill = "none",
color = guide_legend(override.aes = list(size=5))) +
coord_fixed (ratio = 1.2)
dev.off()
disease.severity = rnorm(10)
disease.severity
disease.severity = abs(rnorm(10))
disease.severity
outcome = rbinom(10, prob = disease.severity)
dz.severity = rnorm(10)
dz.severity = abs(rnorm(10))
dz.severity
outcome = rbinom(10)
outcome = rbinom(10, 10)
outcome = rbinom(10, 10, dz.severity)
outcome
outcome = rbinom(1, 10, dz.severity)
outcome
outcome = rbinom(10, 1, dz.severity)
outcome
data.frame(id, dz.severity, outcome)
id = 1:10
dz.severity = abs(rnorm(10))
outcome = rbinom(10, 1, dz.severity)
data.frame(id, dz.severity, outcome)
library(gsDesign)
setwd("/Users/moyin/Documents/GitHub")
install.packages("devtools")
devtools::install_github("mjg211/multiarm")
?des_dtl_bern
library(multiarm)
?des_dtl_bern
??des_dtl_bern
des_dtl_bern()
des_dtl_bern
components_dtl_init
??components_dtl_init
?components_dtl_init
install.packages('DunnettTests')
install.packages('multcomp”')
install.packages('multcomp')
library(multcomp)
d = data.frame(id = 1:100,
tx = sample(c('A, B, C, D'), c(0.25, 0.25, 0.25, 0.25))
)
d = data.frame(id = 1:100,
tx = sample(c('A, B, C, D'), c(0.25, 0.25, 0.25, 0.25), 100)
)
?sample
d = data.frame(id = 1:100,
tx = sample(c('A, B, C, D'), 100, c(0.25, 0.25, 0.25, 0.25))
)
d = data.frame(id = 1:100,
tx = sample(c('A, B, C, D'), 100, T)
)
d
d = data.frame(id = 1:100,
tx = sample(c('A', 'B', 'C', 'D'), 100, T)
)
d
d = data.frame(id = 1:400,
tx = rep(c('A', 'B', 'C', 'D'), each = 100)
outcome = c(rep(c('0', '1'), each = 50),
c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50))
d = data.frame(id = 1:400,
tx = rep(c('A', 'B', 'C', 'D'), each = 100),
outcome = c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50))
)
d = data.frame(id = 1:400,
tx = rep(c('A', 'B', 'C', 'D'), each = 100),
outcome = c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50))
)
head(d)
d = data.frame(id = 1:400,
treatment = rep(c('A', 'B', 'C', 'D'), each = 100),
outcome = c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50))
)
model <- lm(y ~ treatment, data = d)
d = data.frame(id = 1:400,
treatment = rep(c('A', 'B', 'C', 'D'), each = 100),
outcome = c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50))
)
head(d)
model <- lm(outcome ~ treatment, data = d)
model
d = apply(d, 2, as.factor)
d
d = lapply(d, 2, as.factor)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.factor(c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50)))
)
head(d)
model <- lm(outcome ~ treatment, data = d)
model <- glm(outcome ~ treatment, data = d)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.factor(c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50)))
)
head(d)
summary(d)
d$treatment
d$outcome
rep(c('0', '1'), c(40, 60)))
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.factor(c(rep(c('0', '1'), c(50, 50)),
rep(c('0', '1'), c(10, 90)),
rep(c('0', '1'), c(30, 70)),
rep(c('0', '1'), c(40, 60))))
)
head(d)
model <- glm(outcome ~ treatment, data = d)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.factor(c(rep(c('0', '1'), c(50, 50)),
rep(c('0', '1'), c(10, 90)),
rep(c('0', '1'), c(30, 70)),
rep(c('0', '1'), c(40, 60))))
)
head(d)
glm(outcome ~ treatment, data = d)
head(d)
tail(d)
d[which(d$treatment == 'C')]
d[which(d$treatment == 'C'),]
model = glm(outcome ~ treatment, data = d)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.numeric(c(rep(c('0', '1'), c(50, 50)),
rep(c('0', '1'), c(10, 90)),
rep(c('0', '1'), c(30, 70)),
rep(c('0', '1'), c(40, 60))))
)
head(d)
model = glm(outcome ~ treatment, data = d)
model
dunnett_test = multcomp::glht(model, linfct = mcp(treatment = "A"))
dunnett_test
dunnett_test = multcomp::glht(model, linfct = mcp(treatment = "A"))
step_down_test <- summary(test(dunnett_test, "StepDown"))
library(multcomp)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.numeric(c(rep(c('0', '1'), c(50, 50)),
rep(c('0', '1'), c(10, 90)),
rep(c('0', '1'), c(30, 70)),
rep(c('0', '1'), c(40, 60))))
)
head(d)
model = glm(outcome ~ treatment, data = d)
dunnett_test = glht(model, linfct = mcp(treatment = "A"))
step_down_test = summary(test(dunnett_test, "StepDown"))
?test
test(dunnett_test, "StepDown")
dunnett_test
step_down_test = summary(multcomp::test(dunnett_test, "StepDown"))
step_down_test = summary(dunnett_test, test = adjusted(type = "free"))
print(step_down_test)
? mcp
dunnett_test = glht(model,
linfct = mcp(treatment = "A"),
alternative = c("two.sided"))
step_down_test = summary(dunnett_test, test = adjusted(type = "free"))
dunnett_test
dunnett_test = glht(model,
linfct = mcp(treatment = A),
alternative = c("two.sided"))
summary(dunnett_test)
summary(model)
dunnett_test = glht(model,
linfct = mcp(treatment = "A"),
alternative = c("two.sided"))
summary(dunnett_test)
recovery.aov <- aov(minutes ~ blanket, data = recovery)
summary( recovery.aov)
summary(dunnett_test)
summary(model)
dunnett_test = glht(model,
linfct = mcp(treatment = "A"),
alternative = c("two.sided"))
summary(dunnett_test)
summary(dunnett_test, test = adjusted(type = "free"))
head(recovery)
summary(recovery)
dunnett_test = glht(model,
linfct = mcp(treatment = "Dunnett"),
alternative = c("two.sided"))
summary(dunnett_test)
summary(dunnett_test, test = adjusted(type = "free"))
summary(model)
summary(model)$coeff
summary(model)$coeff[,3]
summary(model)$coeff[,4]
round(summary(model)$coeff[,4], 3)
round(summary(model)$coeff[,4], 5)
round(summary(model)$coeff[2:4,4], 5)
summary(dunnett_test)
stepdown = summary(dunnett_test, test = adjusted(type = "free"))
stepdown
data.frame(round(summary(model)$coeff[2:4,4], 5),
round(summary(dunnett_test)$coeff[2:4,4], 5),
round(stepdown$coeff[2:4,4], 5)
)
data.frame(round(summary(model)$coeff[2:4,4], 5),
round(summary(dunnett_test)$coeff[2:4,4], 5),
round(summary(stepdown)$coeff[2:4,4], 5)
)
data.frame(round(summary(model)$coeff[2:4,4], 5),
round(summary(dunnett_test)$coeff[,4], 5),
round(summary(stepdown)$coeff[,4], 5)
)
round(summary(model)$coeff[2:4,4], 5)
round(summary(dunnett_test)$coeff[,4], 5)
summary(dunnett_test)
str(summary(dunnett_test))
summary(dunnett_test)$pvalues
summary(dunnett_test)$test
summary(dunnett_test)$test$pvalues
summary(dunnett_test)
summary(dunnett_test)$test
summary(dunnett_test)$test$pvalues
str(summary(dunnett_test)$test$pvalues)
summary(stepdown)
data.frame(round(summary(model)$coeff[2:4,4], 5),
round(summary(dunnett_test)$test$pvalues, 5),
round(summary(stepdown)$test$pvalues, 5)
)
data.frame(unadj = round(summary(model)$coeff[2:4,4], 5),
dunnett = round(summary(dunnett_test)$test$pvalues, 5),
stepdowndunnett = round(summary(stepdown)$test$pvalues, 5)
)
# Output
data.frame(unadj = round(summary(model)$coeff[2:4,4], 5),
dunnett = round(summary(dunnett_test)$test$pvalues, 5),
stepdowndunnett = round(summary(stepdown)$test$pvalues, 5),
bonferroni = round(summary(model)$coeff[2:4,4], 5)/3)
0.05/3
0.025/3
1-0.025/3 = 0.00833
1-0.025/3
17/18
setwd('practical/')
