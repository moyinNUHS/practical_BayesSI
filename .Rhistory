out_raw = rbind(outA, outB, outC, outD)
out = out_raw %>%
group_by(n, method, type) %>%
summarise(type1error = mean(t1error))
##################
# plot
##################
ggplot(out, aes(x = n, y = type1error, color = method, group = method)) +
geom_point(shape=3)+
geom_line(linetype = 2,linewidth=0.5)+
guides(color=guide_legend(nrow=2, byrow=TRUE))+
scale_color_manual(values = colors)+
labs(shape = NULL, color=NULL)+
scale_x_continuous(breaks = unique(out$n)) +labs(
linetype = NULL,
color = NULL,
x = "Sample Size",
y = "Type 1 error"
) +
scale_y_continuous(limits = c(0, 1),
breaks = seq(0, 1, length.out = 11),
labels = scaleFUN) +
facet_wrap(vars(type)) +
theme_minimal()+
theme(
legend.position = "bottom",
legend.spacing.y = unit(0.02, 'cm'),
legend.margin=margin(0,0,0,0),
text = element_text(size = 14, color = "#4d4d4d"),
legend.title = element_text(),
legend.key.size = unit(0.5, 'cm'),
panel.grid.major.x = element_blank(),
panel.border = element_rect(colour = "#4d4d4d", fill=NA, linewidth =0.5))
}
ind = grep('1.1', files)
length(ind) == 1
f = plot_type1(Scenario = '1.1', d = outputs[[ind]])
f
row
sum(row != 'overlap')
errorA = c(T, F, F)
errorB = c(F, T, F)
errorC = c(F, F, T)
errorA | errorB | errorC
# plot type 1 error - for NULL scenarios only
plot_type1 <- function (Scenario, d, .method_labs = method_labs) {
# number of treatment comparisons
n_tx = nrow(d[[1]][['scenario_out']][[1]][['est_method_1']]) - 1
##################
# collate data for contiguous groups
##################
n = parse_number(names(d))
contig = list()
for (i in n) { # for each sample size
# subset data for the sample size
subset_n = d[[grep(as.character(i), names(d))]]$scenario_out
# for each iteration, apply find_contig_grp function
iter_conti = lapply(subset_n, function(iter){
# list of all data.frames with estimates, each refers to a method
df_list = iter[grep('method_', names(iter))]
rows = lapply(df_list, find_contig_grp)
conti_grp = as.data.frame(do.call(rbind, rows))
conti_grp$n = i
conti_grp$method = rownames(conti_grp)
conti_grp
})
contig[[i]] = do.call(rbind, iter_conti)
}
dat = do.call(rbind, contig)
dat$method = factor(dat$method,
levels = c("est_method_1", "est_method_1_NI", "est_method_1_wk", "est_method_1_str",
"est_method_2", "est_method_2_NI", "est_method_2_wk","est_method_2_str"),
labels = .method_labs)
dat.lean = dat[, grep('treatment', names(dat))]
##################
# calculate type 1 error
##################
# here, type 1 error -
# (A) Identified 1 best treatment (terminating trial for efficacy)
# (B) Identified 2 better treatments
# (C) Identified 3 better treatments
# (D) Identified any 1 treatment as better than the other but 1 contiguous group
# (E) All of the above errors
# (A) Identified 1 best treatment (terminating trial for efficacy)
errorA = apply(dat.lean, 1, function(row){
row = row[-which(row == 'overlap')]
any(table(as.character(row)) == n_tx)
})
outA = data.frame(n = dat$n,
method = dat$method,
t1error = errorA,
type = 'Identified 1 best treatment (terminating trial for efficacy)',
scenario = Scenario)
# (B) Identified 2 better treatments
errorB = apply(dat.lean, 1, function(row){
sum(row == 'overlap') == 2
})
outB = data.frame(n = dat$n,
method = dat$method,
t1error = errorB,
type = 'Identified 2 better treatments (dropping 2 treatments)',
scenario = Scenario)
# (C) Identified 3 better treatments
errorC = apply(dat.lean, 1, function(row){
row = row[-which(row == 'overlap')]
length(unique(row)) == n_tx
})
outC = data.frame(n = dat$n,
method = dat$method,
t1error = errorC,
type = 'Identified 3 better treatments (dropping a treatment) ',
scenario = Scenario)
# (D) Identified any 1 treatment as better than the other but in 1 contiguous group
errorD = apply(dat.lean, 1, function(row){
sum(row != 'overlap') == 1
})
outD = data.frame(n = dat$n,
method = dat$method,
t1error = errorD,
type = 'Identified any 1 as better than any other treatment but in 1 contiguous group',
scenario = Scenario)
# (E) Any of the above errors
errorE = apply(dat.lean, 1, function(row){
any(row != 'overlap')
})
outE = data.frame(n = dat$n,
method = dat$method,
t1error = errorE,
type = 'Any of the above errors',
scenario = Scenario)
# (F) 1 or more better than the other treatment(s)
errorF = errorA | errorB | errorC
outF = data.frame(n = dat$n,
method = dat$method,
t1error = errorF,
type = '1 or more better than the other treatment(s)',
scenario = Scenario)
# calculate type 1 error per sample size (n), per method, per type using power = (1 - mean(error))
out_raw = rbind(outA, outB, outC, outD, outE, outF)
out = out_raw %>%
group_by(n, method, type) %>%
summarise(type1error = mean(t1error))
##################
# plot
##################
ggplot(out, aes(x = n, y = type1error, color = method, group = method)) +
geom_point(shape=3)+
geom_line(linetype = 2,linewidth=0.5)+
guides(color=guide_legend(nrow=2, byrow=TRUE))+
scale_color_manual(values = colors)+
labs(shape = NULL, color=NULL)+
scale_x_continuous(breaks = unique(out$n)) +labs(
linetype = NULL,
color = NULL,
x = "Sample Size",
y = "Type 1 error"
) +
scale_y_continuous(limits = c(0, 1),
breaks = seq(0, 1, length.out = 11),
labels = scaleFUN) +
facet_wrap(vars(type)) +
theme_minimal()+
theme(
legend.position = "bottom",
legend.spacing.y = unit(0.02, 'cm'),
legend.margin=margin(0,0,0,0),
text = element_text(size = 14, color = "#4d4d4d"),
legend.title = element_text(),
legend.key.size = unit(0.5, 'cm'),
panel.grid.major.x = element_blank(),
panel.border = element_rect(colour = "#4d4d4d", fill=NA, linewidth =0.5))
}
f = plot_type1(Scenario = '1.1', d = outputs[[ind]])
f
out$type = factor(out$type, levels = c('Identified 2 better treatments (dropping 2 treatments)',
'Identified 2 better treatments (dropping 2 treatments)',
'Identified 3 better treatments (dropping a treatment) ',
'Identified any 1 as better than any other treatment but in 1 contiguous group',
'1 or more better than the other treatment(s)',
'Any treament different from other treatment(s)'))
# plot type 1 error - for NULL scenarios only
plot_type1 <- function (Scenario, d, .method_labs = method_labs) {
# number of treatment comparisons
n_tx = nrow(d[[1]][['scenario_out']][[1]][['est_method_1']]) - 1
##################
# collate data for contiguous groups
##################
n = parse_number(names(d))
contig = list()
for (i in n) { # for each sample size
# subset data for the sample size
subset_n = d[[grep(as.character(i), names(d))]]$scenario_out
# for each iteration, apply find_contig_grp function
iter_conti = lapply(subset_n, function(iter){
# list of all data.frames with estimates, each refers to a method
df_list = iter[grep('method_', names(iter))]
rows = lapply(df_list, find_contig_grp)
conti_grp = as.data.frame(do.call(rbind, rows))
conti_grp$n = i
conti_grp$method = rownames(conti_grp)
conti_grp
})
contig[[i]] = do.call(rbind, iter_conti)
}
dat = do.call(rbind, contig)
dat$method = factor(dat$method,
levels = c("est_method_1", "est_method_1_NI", "est_method_1_wk", "est_method_1_str",
"est_method_2", "est_method_2_NI", "est_method_2_wk","est_method_2_str"),
labels = .method_labs)
dat.lean = dat[, grep('treatment', names(dat))]
##################
# calculate type 1 error
##################
# here, type 1 error -
# (A) Identified 1 best treatment (terminating trial for efficacy)
# (B) Identified 2 better treatments
# (C) Identified 3 better treatments
# (D) Identified any 1 treatment as better than the other but 1 contiguous group
# (E) All of the above errors
# (A) Identified 1 best treatment (terminating trial for efficacy)
errorA = apply(dat.lean, 1, function(row){
row = row[-which(row == 'overlap')]
any(table(as.character(row)) == n_tx)
})
outA = data.frame(n = dat$n,
method = dat$method,
t1error = errorA,
type = 'Identified 1 best treatment (terminating trial for efficacy)',
scenario = Scenario)
# (B) Identified 2 better treatments
errorB = apply(dat.lean, 1, function(row){
sum(row == 'overlap') == 2
})
outB = data.frame(n = dat$n,
method = dat$method,
t1error = errorB,
type = 'Identified 2 better treatments (dropping 2 treatments)',
scenario = Scenario)
# (C) Identified 3 better treatments
errorC = apply(dat.lean, 1, function(row){
row = row[-which(row == 'overlap')]
length(unique(row)) == n_tx
})
outC = data.frame(n = dat$n,
method = dat$method,
t1error = errorC,
type = 'Identified 3 better treatments (dropping a treatment) ',
scenario = Scenario)
# (D) Identified any 1 treatment as better than the other but in 1 contiguous group
errorD = apply(dat.lean, 1, function(row){
sum(row != 'overlap') == 1
})
outD = data.frame(n = dat$n,
method = dat$method,
t1error = errorD,
type = 'Identified any 1 as better than any other treatment but in 1 contiguous group',
scenario = Scenario)
# (E) Any of the above errors
errorE = apply(dat.lean, 1, function(row){
any(row != 'overlap')
})
outE = data.frame(n = dat$n,
method = dat$method,
t1error = errorE,
type = 'Any treament different from other treatment(s)',
scenario = Scenario)
# (F) 1 or more better than the other treatment(s)
errorF = errorA | errorB | errorC
outF = data.frame(n = dat$n,
method = dat$method,
t1error = errorF,
type = '1 or more better than the other treatment(s)',
scenario = Scenario)
# calculate type 1 error per sample size (n), per method, per type using power = (1 - mean(error))
out_raw = rbind(outA, outB, outC, outD, outE, outF)
out = out_raw %>%
group_by(n, method, type) %>%
summarise(type1error = mean(t1error))
out$type = factor(out$type, levels = c('Identified 1 best treatment (terminating trial for efficacy)',
'Identified 2 better treatments (dropping 2 treatments)',
'Identified 3 better treatments (dropping a treatment) ',
'Identified any 1 as better than any other treatment but in 1 contiguous group',
'1 or more better than the other treatment(s)',
'Any treament different from other treatment(s)'))
##################
# plot
##################
ggplot(out, aes(x = n, y = type1error, color = method, group = method)) +
geom_point(shape=3)+
geom_line(linetype = 2,linewidth=0.5)+
guides(color=guide_legend(nrow=2, byrow=TRUE))+
scale_color_manual(values = colors)+
labs(shape = NULL, color=NULL)+
scale_x_continuous(breaks = unique(out$n)) +labs(
linetype = NULL,
color = NULL,
x = "Sample Size",
y = "Type 1 error"
) +
scale_y_continuous(limits = c(0, 1),
breaks = seq(0, 1, length.out = 11),
labels = scaleFUN) +
facet_wrap(vars(type)) +
theme_minimal()+
theme(
legend.position = "bottom",
legend.spacing.y = unit(0.02, 'cm'),
legend.margin=margin(0,0,0,0),
text = element_text(size = 14, color = "#4d4d4d"),
legend.title = element_text(),
legend.key.size = unit(0.5, 'cm'),
panel.grid.major.x = element_blank(),
panel.border = element_rect(colour = "#4d4d4d", fill=NA, linewidth =0.5))
}
f = plot_type1(Scenario = '1.1', d = outputs[[ind]])
f
? facet_wrap
# plot type 1 error - for NULL scenarios only
plot_type1 <- function (Scenario, d, .method_labs = method_labs) {
# number of treatment comparisons
n_tx = nrow(d[[1]][['scenario_out']][[1]][['est_method_1']]) - 1
##################
# collate data for contiguous groups
##################
n = parse_number(names(d))
contig = list()
for (i in n) { # for each sample size
# subset data for the sample size
subset_n = d[[grep(as.character(i), names(d))]]$scenario_out
# for each iteration, apply find_contig_grp function
iter_conti = lapply(subset_n, function(iter){
# list of all data.frames with estimates, each refers to a method
df_list = iter[grep('method_', names(iter))]
rows = lapply(df_list, find_contig_grp)
conti_grp = as.data.frame(do.call(rbind, rows))
conti_grp$n = i
conti_grp$method = rownames(conti_grp)
conti_grp
})
contig[[i]] = do.call(rbind, iter_conti)
}
dat = do.call(rbind, contig)
dat$method = factor(dat$method,
levels = c("est_method_1", "est_method_1_NI", "est_method_1_wk", "est_method_1_str",
"est_method_2", "est_method_2_NI", "est_method_2_wk","est_method_2_str"),
labels = .method_labs)
dat.lean = dat[, grep('treatment', names(dat))]
##################
# calculate type 1 error
##################
# here, type 1 error -
# (A) Identified 1 best treatment (terminating trial for efficacy)
# (B) Identified 2 better treatments
# (C) Identified 3 better treatments
# (D) Identified any 1 treatment as better than the other but 1 contiguous group
# (E) All of the above errors
# (A) Identified 1 best treatment (terminating trial for efficacy)
errorA = apply(dat.lean, 1, function(row){
row = row[-which(row == 'overlap')]
any(table(as.character(row)) == n_tx)
})
outA = data.frame(n = dat$n,
method = dat$method,
t1error = errorA,
type = 'Identified 1 best treatment (terminating trial for efficacy)',
scenario = Scenario)
# (B) Identified 2 better treatments
errorB = apply(dat.lean, 1, function(row){
sum(row == 'overlap') == 2
})
outB = data.frame(n = dat$n,
method = dat$method,
t1error = errorB,
type = 'Identified 2 better treatments (dropping 2 treatments)',
scenario = Scenario)
# (C) Identified 3 better treatments
errorC = apply(dat.lean, 1, function(row){
row = row[-which(row == 'overlap')]
length(unique(row)) == n_tx
})
outC = data.frame(n = dat$n,
method = dat$method,
t1error = errorC,
type = 'Identified 3 better treatments (dropping a treatment) ',
scenario = Scenario)
# (D) Identified any 1 treatment as better than the other but in 1 contiguous group
errorD = apply(dat.lean, 1, function(row){
sum(row != 'overlap') == 1
})
outD = data.frame(n = dat$n,
method = dat$method,
t1error = errorD,
type = 'Identified any 1 as better than any other treatment but in 1 contiguous group',
scenario = Scenario)
# (E) Any of the above errors
errorE = apply(dat.lean, 1, function(row){
any(row != 'overlap')
})
outE = data.frame(n = dat$n,
method = dat$method,
t1error = errorE,
type = 'Any treament different from other treatment(s)',
scenario = Scenario)
# (F) 1 or more better than the other treatment(s)
errorF = errorA | errorB | errorC
outF = data.frame(n = dat$n,
method = dat$method,
t1error = errorF,
type = '1 or more better than the other treatment(s)',
scenario = Scenario)
# calculate type 1 error per sample size (n), per method, per type using power = (1 - mean(error))
out_raw = rbind(outA, outB, outC, outD, outE, outF)
out = out_raw %>%
group_by(n, method, type) %>%
summarise(type1error = mean(t1error))
out$type = factor(out$type, levels = c('Identified 1 best treatment (terminating trial for efficacy)',
'Identified 2 better treatments (dropping 2 treatments)',
'Identified 3 better treatments (dropping a treatment) ',
'Identified any 1 as better than any other treatment but in 1 contiguous group',
'1 or more better than the other treatment(s)',
'Any treament different from other treatment(s)'))
##################
# plot
##################
ggplot(out, aes(x = n, y = type1error, color = method, group = method)) +
geom_point(shape=3)+
geom_line(linetype = 2,linewidth=0.5)+
guides(color=guide_legend(nrow=2, byrow=TRUE))+
scale_color_manual(values = colors)+
labs(shape = NULL, color=NULL)+
scale_x_continuous(breaks = unique(out$n)) +labs(
linetype = NULL,
color = NULL,
x = "Sample Size",
y = "Type 1 error"
) +
scale_y_continuous(limits = c(0, 1),
breaks = seq(0, 1, length.out = 11),
labels = scaleFUN) +
facet_wrap(vars(type), nrow = 3) +
theme_minimal()+
theme(
legend.position = "bottom",
legend.spacing.y = unit(0.02, 'cm'),
legend.margin=margin(0,0,0,0),
text = element_text(size = 14, color = "#4d4d4d"),
legend.title = element_text(),
legend.key.size = unit(0.5, 'cm'),
panel.grid.major.x = element_blank(),
panel.border = element_rect(colour = "#4d4d4d", fill=NA, linewidth =0.5))
}
# clean environment
rm(list = ls())
# set working directory to the `practical/` folder
wd = "/Users/cheryl/Documents/Documents - Xinru’s MacBook Pro (2)/duke-nus/bibhas/practical/practical/"
#wd = '~/Documents/GitHub/practical/'
setwd(wd)
# load libraries and functions
scripts = paste0(wd, 'Code/Functions/', list.files(paste0(wd, 'Code/Functions/')))
lapply(scripts, source)
# load data in the output folder
files = list.files(path = paste0(wd, 'Code/Run_output'), full.names = TRUE, pattern = "iter1000_2024-02-04.rds")
power_t1_files = grep('power_|t1_', files)
if (length(power_t1_files) > 0) {files = files[-grep('power_|t1_', files)]}
outputs = list()
for (file in files){
outputs[[sub('.*/', '', file)]] = readRDS(file)
}
# get names of methods
all_names = names(outputs[[1]][[1]]$scenario_out[[1]])
all_method_names = all_names[grep('method', all_names)]
method_labs = rep(NA, length(all_method_names))
method_labs[grep('method_1', all_method_names)] = "Fixed-effect (frequentist)"
method_labs[grep('method_1_', all_method_names)] = "Fixed-effect (Bayesian, "
method_labs[grep('method_2', all_method_names)] = "Mixed-effect (frequentist)"
method_labs[grep('method_2_', all_method_names)] = "Mixed-effect (Bayesian, "
method_labs[grep('NI', all_method_names)] = paste0(method_labs[grep('NI', all_method_names)], 'non-informative prior)')
method_labs[endsWith(all_method_names, 'str')] = paste0(method_labs[endsWith(all_method_names, 'str')], 'strongly-informative prior)')
method_labs[endsWith(all_method_names, 'wk')] = paste0(method_labs[endsWith(all_method_names, 'wk')], 'weakly-informative prior)')
method_labs[endsWith(all_method_names, 'str_ur1')] = paste0(method_labs[endsWith(all_method_names, 'str_ur1')], 'strongly-informative/UR1 prior)')
method_labs[endsWith(all_method_names, 'str_ur2')] = paste0(method_labs[endsWith(all_method_names, 'str_ur2')], 'strongly-informative/UR2 prior)')
method_labs[endsWith(all_method_names, 'wk_ur1')] = paste0(method_labs[endsWith(all_method_names, 'wk_ur1')], 'weakly-informative/UR1 prior)')
method_labs[endsWith(all_method_names, 'wk_ur2')] = paste0(method_labs[endsWith(all_method_names, 'wk_ur2')], 'weakly-informative/UR2 prior)')
n_methods = length(method_labs)
shapes = 1:n_methods # methods differentiated by shapes
names(shapes) = method_labs
# get names of treatments
tx_labs = rownames(outputs[[1]][[1]]$scenario_out[[1]]$est_method_1_str)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colors_list = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
colors = c("black", "#56B4E9", "#009E73", "#E69F00")
#sample(colors_list, length(tx_labs))
names(colors) = tx_labs
font_size = 22
pt_size = 2
N_iter = 1000
ind1.2 = grep('1.2', files,fixed = TRUE)
power_filename = paste0('power_', sub('.*/', '', files[[ind1.2]]))
power_filename %in% list.files('Code/Run_output/')
Scenario = '1.2'
d = outputs[[ind1.2]]
.method_labs = method_labs
.all_method_names = all_method_names
no_pattern=4
# number of treatment comparisons
n_tx = nrow(d[[1]][['scenario_out']][[1]][['est_method_1']]) - 1
d[[1]][['scenario_out']]
View(d)
paste0(paste("=",as.character(i),sep=" "),"$")
i=500
paste0(paste("=",as.character(i),sep=" "),"$")
names(d)
