d = data.frame(id = 1:400,
tx = rep(c('A', 'B', 'C', 'D'), each = 100),
outcome = c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50))
)
head(d)
d = data.frame(id = 1:400,
treatment = rep(c('A', 'B', 'C', 'D'), each = 100),
outcome = c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50))
)
model <- lm(y ~ treatment, data = d)
d = data.frame(id = 1:400,
treatment = rep(c('A', 'B', 'C', 'D'), each = 100),
outcome = c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50))
)
head(d)
model <- lm(outcome ~ treatment, data = d)
model
d = apply(d, 2, as.factor)
d
d = lapply(d, 2, as.factor)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.factor(c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50)))
)
head(d)
model <- lm(outcome ~ treatment, data = d)
model <- glm(outcome ~ treatment, data = d)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.factor(c(rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50),
rep(c('0', '1'), each = 50)))
)
head(d)
summary(d)
d$treatment
d$outcome
rep(c('0', '1'), c(40, 60)))
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.factor(c(rep(c('0', '1'), c(50, 50)),
rep(c('0', '1'), c(10, 90)),
rep(c('0', '1'), c(30, 70)),
rep(c('0', '1'), c(40, 60))))
)
head(d)
model <- glm(outcome ~ treatment, data = d)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.factor(c(rep(c('0', '1'), c(50, 50)),
rep(c('0', '1'), c(10, 90)),
rep(c('0', '1'), c(30, 70)),
rep(c('0', '1'), c(40, 60))))
)
head(d)
glm(outcome ~ treatment, data = d)
head(d)
tail(d)
d[which(d$treatment == 'C')]
d[which(d$treatment == 'C'),]
model = glm(outcome ~ treatment, data = d)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.numeric(c(rep(c('0', '1'), c(50, 50)),
rep(c('0', '1'), c(10, 90)),
rep(c('0', '1'), c(30, 70)),
rep(c('0', '1'), c(40, 60))))
)
head(d)
model = glm(outcome ~ treatment, data = d)
model
dunnett_test = multcomp::glht(model, linfct = mcp(treatment = "A"))
dunnett_test
dunnett_test = multcomp::glht(model, linfct = mcp(treatment = "A"))
step_down_test <- summary(test(dunnett_test, "StepDown"))
library(multcomp)
d = data.frame(id = 1:400,
treatment = as.factor(rep(c('A', 'B', 'C', 'D'), each = 100)),
outcome = as.numeric(c(rep(c('0', '1'), c(50, 50)),
rep(c('0', '1'), c(10, 90)),
rep(c('0', '1'), c(30, 70)),
rep(c('0', '1'), c(40, 60))))
)
head(d)
model = glm(outcome ~ treatment, data = d)
dunnett_test = glht(model, linfct = mcp(treatment = "A"))
step_down_test = summary(test(dunnett_test, "StepDown"))
?test
test(dunnett_test, "StepDown")
dunnett_test
step_down_test = summary(multcomp::test(dunnett_test, "StepDown"))
step_down_test = summary(dunnett_test, test = adjusted(type = "free"))
print(step_down_test)
? mcp
dunnett_test = glht(model,
linfct = mcp(treatment = "A"),
alternative = c("two.sided"))
step_down_test = summary(dunnett_test, test = adjusted(type = "free"))
dunnett_test
dunnett_test = glht(model,
linfct = mcp(treatment = A),
alternative = c("two.sided"))
summary(dunnett_test)
summary(model)
dunnett_test = glht(model,
linfct = mcp(treatment = "A"),
alternative = c("two.sided"))
summary(dunnett_test)
recovery.aov <- aov(minutes ~ blanket, data = recovery)
summary( recovery.aov)
summary(dunnett_test)
summary(model)
dunnett_test = glht(model,
linfct = mcp(treatment = "A"),
alternative = c("two.sided"))
summary(dunnett_test)
summary(dunnett_test, test = adjusted(type = "free"))
head(recovery)
summary(recovery)
dunnett_test = glht(model,
linfct = mcp(treatment = "Dunnett"),
alternative = c("two.sided"))
summary(dunnett_test)
summary(dunnett_test, test = adjusted(type = "free"))
summary(model)
summary(model)$coeff
summary(model)$coeff[,3]
summary(model)$coeff[,4]
round(summary(model)$coeff[,4], 3)
round(summary(model)$coeff[,4], 5)
round(summary(model)$coeff[2:4,4], 5)
summary(dunnett_test)
stepdown = summary(dunnett_test, test = adjusted(type = "free"))
stepdown
data.frame(round(summary(model)$coeff[2:4,4], 5),
round(summary(dunnett_test)$coeff[2:4,4], 5),
round(stepdown$coeff[2:4,4], 5)
)
data.frame(round(summary(model)$coeff[2:4,4], 5),
round(summary(dunnett_test)$coeff[2:4,4], 5),
round(summary(stepdown)$coeff[2:4,4], 5)
)
data.frame(round(summary(model)$coeff[2:4,4], 5),
round(summary(dunnett_test)$coeff[,4], 5),
round(summary(stepdown)$coeff[,4], 5)
)
round(summary(model)$coeff[2:4,4], 5)
round(summary(dunnett_test)$coeff[,4], 5)
summary(dunnett_test)
str(summary(dunnett_test))
summary(dunnett_test)$pvalues
summary(dunnett_test)$test
summary(dunnett_test)$test$pvalues
summary(dunnett_test)
summary(dunnett_test)$test
summary(dunnett_test)$test$pvalues
str(summary(dunnett_test)$test$pvalues)
summary(stepdown)
data.frame(round(summary(model)$coeff[2:4,4], 5),
round(summary(dunnett_test)$test$pvalues, 5),
round(summary(stepdown)$test$pvalues, 5)
)
data.frame(unadj = round(summary(model)$coeff[2:4,4], 5),
dunnett = round(summary(dunnett_test)$test$pvalues, 5),
stepdowndunnett = round(summary(stepdown)$test$pvalues, 5)
)
# Output
data.frame(unadj = round(summary(model)$coeff[2:4,4], 5),
dunnett = round(summary(dunnett_test)$test$pvalues, 5),
stepdowndunnett = round(summary(stepdown)$test$pvalues, 5),
bonferroni = round(summary(model)$coeff[2:4,4], 5)/3)
0.05/3
0.025/3
1-0.025/3 = 0.00833
1-0.025/3
c = ' Hsu Li Yang1,3, Cao Yang6, H. Rogier van Doorn2,7,  Louise Thwaites2,8, Yen Lam Minh8, Abhilasha Karkey2,9,  Jeanette Teo10, Andrea Kwa Lay Hoon11,  Indumathi Venkatachalam12, Kalisvar Marimuthu13,14,  Ng Oon Tek13, 14, Shawn Vasoo13,14, Suwatthiya Kitsaran15, Siriluck Anunnatsiri16, Pope Kosalaraksa17,  Darunee Chotiprasitsakul18, Pitak Santanirand18, Rongpong Plongla19, Chua Hock Hin20, Xun Ting Tiong20, Wong Ke Juin21,  Sasheela A/P Sri La Sri Ponnampalavanar22, Helmi Bin Sulaiman22,  Mohd Zulfakar Mazlan23, Zeti Norfidiyati Salmuna24, Giri Shan Rajahram25, Mohd Zaki Bin Mohd Zaili26, Joshua R. Francis27,  Nevio Sarmento27,28,  Helio Guterres29,  Tessa Oakley27,  Jennifer Yan27, Ari Tilman28,  Muhammad Osama Rehman Khalid30, Madiha Hashmi30, Faisal Mahmood31, Inke Nadia D. Lubis32, Hendri Wijaya32,33, Cybele L. Abad34, Arthur Dessi Roman35, Cecilia C. Maramba- Lazarte35,  Gazi Md. Salahuddin Mamun36,  Dayang Hjh Rosmonaliza Binti Hj Awang Asli37, Muhd Haziq Fikry bin Haji Abdul Momin37, Ulziijargal Gurjav38, Azizullah Khan  Dhiloo39, Ambreen Fatima39, Bory Sotharith40, George M. Varghese41, Lalit Gupta42, Pratik Tantia43'
length(grep(',', c))
rnorm(1000, 1)
n_pt = 1000
age = rnorm(n_pt, 50)
age
age = rnorm(n_pt, 50, sd = 3)
age
age = rnorm(n_pt, 50, sd = 10)
age
days_before_VAP = rexp(n_pt, 5)
days_before_VAP
dens(age)
plot(age)
hist(age)
age = rnorm(n_pt, 50, sd = 3)
hist(age)
age = rnorm(n_pt, 50, sd = 1)
hist(age)
days_before_VAP = rexp(n_pt, 5)
hist(days_before_VAP)
?rexp
days_before_VAP = rexp(n_pt, 5)
hist(days_before_VAP)
days_before_VAP = rexp(n_pt, 50)
hist(days_before_VAP )
setwd('practical/')
.25*rep(1,4)
## starting values
namestx <- c("T1","T2","T3","T4") # tx = factor variable indicating the four arms:  T1, T2, T3, T4
active.tx <- namestx
active.tx
peff <- .055
pfut <- .5
dropeff <- rep(0,4) ; names(dropeff) <- namestx
dropfut <- dropeff
dropeff
## Say we enrolled from 5 sites, 100 patients per site
sites = rep(1:5, 100)
sites
## Say we enrolled from 5 sites, 100 patients per site
sites = paste0('j', rep(1:5, 100))
sites
## Say we enrolled from 5 sites, 100 patients per site
sites = paste0('j', rep(1:5, each = 100))
sites
tx = paste0('tx', rep(1:4, each = 25))
tx
tx_eff = c(0.9, 0.6, 0.3, 0.1)
dead = NULL
dead[which(tx == 'tx1')]
dead = rep(0, length(tx))
dead
dead[which(tx == 'tx1')]
length(dead[which(tx == 'tx1')])
## say we enrolled from 5 sites, 100 patients per site (25 to each treatment)
site = paste0('j', rep(1:5, each = 100))
tx.site = paste0('tx', rep(1:4, each = 25))
tx = rep(tx.site, each = 5)
tx
tx.site
tx = rep(tx.site, 5)
tx
length(site)
length(site)
## say we enrolled from 4 sites, 100 patients per site
site = paste0('j', rep(1:4, each = 100))
## 25 to each treatment per site
tx.site = paste0('tx', rep(1:4, each = 25))
tx = rep(tx.site, 5)
## say treatment efficacy for respective treatments are as follows (proportion survived), i.e. T1 is clearly the best
## say no site effects at all i.e. patients from all sites had the same probability of survival
tx_eff = c(0.9, 0.6, 0.3, 0.1)
dead = rep(0, length(tx)) # just fill in as everyone survived first
dead[which(tx == 'tx1')] =
data.use
data.model = data.frame(
site = rep(1:4, each = 2), ## say we enrolled from 4 sites
dead = rep(c(0, 1), 4),
wts =
)
data.model = data.frame(
site = rep(1:4, each = 2), ## say we enrolled from 4 sites
dead = rep(c(0, 1), 4),
wts = 1
)
data.model
data.model = data.frame(
site = rep(1:4, each = 2 * numactive.tx), ## say we enrolled from 4 sites
dead = rep(c(0, 1), each = 2 * numactive.tx),
wts = 1
)
## starting values
namestx <- c("T1","T2","T3","T4") # tx = factor variable indicating the four arms:  T1, T2, T3, T4
active.tx <- namestx
numactive.tx <- 4                 # number of treatments
data.model = data.frame(
site = rep(1:4, each = 2 * numactive.tx), ## say we enrolled from 4 sites
dead = rep(c(0, 1), each = 2 * numactive.tx),
wts = 1
)
data.model
data.model = data.frame(
site = rep(1:4, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(namestx, numactive.tx),
dead = rep(c(0, 1), each = 2 * numactive.tx),
wts = 1
)
data.model
## starting values
namestx <- c("T1","T2","T3","T4") # tx = factor variable indicating the four arms:  T1, T2, T3, T4
active.tx <- namestx
numactive.tx <- 4                 # number of treatments
num.sites <- 4                    # say we enrolled from 4 sites
data.model = data.frame(
site = rep(1:num.sites, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(rep(namestx, each = 2), num.sites),
dead = rep(c(0, 1), each = 2 * numactive.tx),
wts = 1
)
data.model
data.model = data.frame(
site = rep(1:num.sites, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(rep(namestx, each = 2), num.sites),
dead = rep(rep(c(0, 1), each = 2), numactive.tx),
wts = 1
)
data.model
data.model = data.frame(
site = rep(1:num.sites, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(rep(namestx, each = 2), num.sites),
dead = rep(rep(c(0, 1), 2), each = numactive.tx),
wts = 1
)
data.model
rep(c(0, 1), 2)
data.model = data.frame(
site = rep(1:num.sites, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(rep(namestx, each = 2), num.sites),
dead = rep(rep(c(0, 1), 2), each = numactive.tx * num.sites),
wts = 1
)
data.model
data.model = data.frame(
site = rep(1:num.sites, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(rep(namestx, each = 2), num.sites),
dead = rep(rep(c(0, 1), 2), numactive.tx * num.sites),
wts = 1
)
data.model
## starting values
namestx <- c("T1","T2","T3","T4") # tx = factor variable indicating the four arms:  T1, T2, T3, T4
active.tx <- namestx
numactive.tx <- 4                 # number of treatments
num.sites <- 4                    # say we enrolled from 4 sites
num.patients.site <- 1000         # and enrol 1000 patients per site
num.patients.site.arm <- num.patients.site / numactive.tx
## say treatment efficacy for respective treatments are as follows (proportion survived), i.e. T1 is clearly the best
## say no site effects at all i.e. patients from all sites had the same probability of survival
tx_eff = c(0.9, 0.6, 0.3, 0.1)
data.model = data.frame(
site = rep(1:num.sites, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(rep(namestx, each = 2), num.sites),
dead = rep(rep(c(0, 1), 2), numactive.tx * num.sites),
wts = c(tx_eff[1], 1 - tx_eff[1],
tx_eff[2], 1 - tx_eff[2],
tx_eff[3], 1 - tx_eff[3],
tx_eff[4], 1 - tx_eff[4]) * num.patients.site.arm
)
c(tx_eff[1], 1 - tx_eff[1],
tx_eff[2], 1 - tx_eff[2],
tx_eff[3], 1 - tx_eff[3],
tx_eff[4], 1 - tx_eff[4]) * num.patients.site.arm
data.model = data.frame(
site = rep(1:num.sites, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(rep(namestx, each = 2), num.sites),
dead = rep(rep(c(0, 1), 2), numactive.tx * num.sites),
wts = rep(c(tx_eff[1], 1 - tx_eff[1],
tx_eff[2], 1 - tx_eff[2],
tx_eff[3], 1 - tx_eff[3],
tx_eff[4], 1 - tx_eff[4]) * num.patients.site.arm, num.sites)
)
data.model
## perform generalized linear mixed model on current data
## log⁡(γ_ij ) =μ+μ_j+β_1 I(T_i=T1)+β_2 I(T_i=T2)+β_3 I(T_i=T3)
## using tx as a factor means it works no matter what active arms
data.use = data.model
moddfactor <- glmer(dead ~ tx + (1|site),family=poisson,weights=wts,data=data.use)
??glmer
moddfactor <- lme4::glmer(dead ~ tx + (1|site),family=poisson,weights=wts,data=data.use)
moddfactor
head(data.model)
coefs <- summary(moddfactor)$coef
coefs
## now fix rownames to have 2 digits, take off model-inserted 'tx' prefix,
##   and let '(Intercept)' -> whatever is missing from active list
rownames(coefs) <- substr(rownames(coefs),3,4)
coefs
knitr::opts_chunk$set(echo = TRUE)
coefs
data.use = data.model
moddfactor <- lme4::glmer(dead ~ tx + (1|site),family=poisson,weights=wts,data=data.use)
coefs <- summary(moddfactor)$coef
coefs
missingone <- active.tx[!is.element(active.tx,rownames(coefs))]
rownames(coefs)[rownames(coefs) == 'nt'] <- missingone
coefs
data.use = data.model
moddfactor <- lme4::glmer(dead ~ tx + (1|site),family=poisson,weights=wts,data=data.use)
rownames(coefs) <- substr(rownames(coefs),3,4) ## fix rownames to have 2 digits, take off model-inserted 'tx' prefix,
missingone <- active.tx[!is.element(active.tx,rownames(coefs))]
rownames(coefs)[rownames(coefs) == 'nt'] <- missingone
coefs
vc <- vcov(moddfactor)  ;  dimnames(vc) <- list(active.tx,active.tx)
vc
## ests takes the coefficients and adds the intercept to non-reference
##   in order to provide mortality rate estimate (on log scale) for each
ests <- coefs[,1]
ests[2:numactive.tx] <- ests[2:numactive.tx] + coefs[1,1]
## rank the estimates of death by treatment
rankstxs <- sort(ests)
## determine the names of the treatments
besttx <- names(rankstxs[1])  ;  secbest <- names(rankstxs[2])
remainingb <- names(rankstxs[2:numactive.tx])
remainingb
besttx
coefs[,1]
ests[2:numactive.tx] + coefs[1,1]
ests[2:numactive.tx]
ests
coefs[,1]
## ests takes the coefficients and adds the intercept to non-reference
##   in order to provide mortality rate estimate (on log scale) for each
ests <- coefs[,1]
ests
coefs[1,1]
ests[2:numactive.tx]
ests <- coefs[,1]
ests[2:numactive.tx] <- ests[2:numactive.tx] + coefs[1,1]
refreg <- names(ests[1]) ## name the reference treatment for the regression
refreg
ests
rankstxs <- sort(ests)
## determine the names of the treatments
besttx <- names(rankstxs[1])  ;  secbest <- names(rankstxs[2])
besttx
refreg
is.element(refreg,c(besttx,secbest))
?is.element
######    STEP 1a #######
## if reference is best, then test if second best beta is > 0
refb <- ifelse(besttx==refreg, secbest, besttx)
refb
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
## starting values
namestx <- c("T1","T2","T3","T4")       # tx = factor variable indicating the four arms:  T1, T2, T3, T4
active.tx <- namestx
numactive.tx <- 4                       # number of treatments
num.sites <- 4                          # say we enrolled from 4 sites
num.patients.site <- 1000               # and enrol 1000 patients per site
num.patients.site.arm <- num.patients.site / numactive.tx
p.assign <- .25 * rep(1, numactive.tx)  # same probability of being randomised to any of the treatments
## say treatment efficacy for respective treatments are as follows (proportion survived), i.e. T1 is clearly the best
## say no site effects at all i.e. patients from all sites had the same probability of survival
tx_eff = c(0.9, 0.6, 0.3, 0.1)
peff <- .055                      # efficacy cutoff is 0.055
pfut <- .5                        # futility cutoff is 0.5
dropeff <- rep(0, 4); names(dropeff) <- namestx
dropfut <- dropeff
### assume no site effect at all
d = data.frame(
site = rep(1:num.sites, each = 2 * numactive.tx), ## say we enrolled from 4 sites
tx = rep(rep(namestx, each = 2), num.sites),
dead = rep(rep(c(0, 1), 2), numactive.tx * num.sites),
wts = rep(c(tx_eff[1], 1 - tx_eff[1],
tx_eff[2], 1 - tx_eff[2],
tx_eff[3], 1 - tx_eff[3],
tx_eff[4], 1 - tx_eff[4]) * num.patients.site.arm, num.sites)
)
head(d)
moddfactor <- lme4::glmer(dead ~ tx + (1|site),family=poisson,weights=wts,data=d) ## run model
coefs <- summary(moddfactor)$coef # get coefficients
## fix rownames to have 2 digits, take off model-inserted 'tx' prefix,
rownames(coefs) <- substr(rownames(coefs),3,4)
missingone <- active.tx[!is.element(active.tx,rownames(coefs))]
rownames(coefs)[rownames(coefs) == 'nt'] <- missingone
coefs
vc <- vcov(moddfactor)  ;  dimnames(vc) <- list(active.tx,active.tx)
vc
ests <- coefs[,1]
ests[2:numactive.tx] <- ests[2:numactive.tx] + coefs[1,1]
refreg <- names(ests[1]) ## find the reference treatment in the regression, which is T1 in this the current examples
ests; refreg
rankstxs <- sort(ests)
## determine the names of the treatments
besttx <- names(rankstxs[1])  ;  secbest <- names(rankstxs[2])
remainingb <- names(rankstxs[2:numactive.tx])
besttx; remainingb
is.element(refreg, c(besttx, secbest))
######    STEP 1a #######
## if reference is best, then test if second best beta is > 0
refb <- ifelse(besttx==refreg, secbest, besttx)
besttx==refreg
secbest
secbest
coefs[refb,'z value']
refb
coefs
abs(coefs[refb,'z value'])
qnorm(0.975)
pnorm(1.959964)
######    STEP 1b #######
## if reference is 2nd, then test if best beta is < 0
## so use a two-sided test on whichever one is not reference
pbest <- 2*pnorm(-abs(coefs[refb,'z value']),0,1,lower.tail=T) # cumulative distribution function of a standard normal distribution
pbest
vc
remainingb
(pbest < peff
rep(1*(pbest < peff), length(remainingb))
rep(1*(pbest < peff), length(remainingb))
dropeff[remainingb] <- rep(1*(pbest < peff), length(remainingb))
dropeff
